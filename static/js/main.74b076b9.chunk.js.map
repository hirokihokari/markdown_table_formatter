{"version":3,"sources":["Title.js","Input.js","Result.js","Format.js","FormatData.js","FormatHeader.js","FormatDivider.js","Column.js","isDefined.js","Row.js","Table.js","Formatter.js","Main.js","IssueCollector.js","App.js","serviceWorker.js","index.js"],"names":["Title","styled","h1","InputArea","div","Textarea","textarea","props","text","onInputChange","value","onChange","ev","target","ResultArea","Format","data","width","alignDir","this","extraPad","pad","length","Error","spaces","Math","floor","ceil","count","repeat","FormatData","align","FormatHeader","FormatDivider","hyphens","Column","input","rowType","cell","trim","Klass","format","isNotDefined","obj","isDefined","Row","rowNum","columns","replace","split","map","columnInput","type","columnCount","columnWidths","alignDirs","formatted","i","push","join","column","cellWidth","Table","rows","rowInput","index","row","Formatter","table","maxWidths","forEach","isDivider","dirs","RegExp","test","FormatArea","Left","Right","Center","Button","button","useState","inputText","setInputText","resultText","setResultText","onClick","navigator","clipboard","readText","then","writeText","Input","Result","DefaultButton","bgColor","color","FixedButton","useEffect","window","ATL_JQ_PAGE_PROPS","showCollectorDialog","document","querySelector","addEventListener","e","preventDefault","id","App","Main","IssueCollector","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.74b076b9.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst Title = styled.h1`\n`\n\nexport default Title\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst InputArea = styled.div`\n  width: 100%;\n  height: 100%;\n`\n\nconst Textarea = styled.textarea`\n  width: 100%;\n  height: 100%;\n  font-family: monospace;\n`\n\nexport default props => {\n  const { text, onInputChange } = props\n\n  return (\n    <InputArea>\n      <Textarea\n        value={text}\n        onChange={ev => onInputChange(ev.target.value)}/>\n    </InputArea>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst ResultArea = styled.div`\n  height: 500px;\n  border: 1px silver solid;\n`\n\nexport default props => {\n  const { text } = props\n\n  return (\n    <ResultArea>\n      <pre>{text}</pre>\n    </ResultArea>\n  )\n}\n","const extraPad = 1\n\nexport default class Format {\n  constructor(data, width, alignDir) {\n    this.extraPad = extraPad\n    this.data = data\n    this.width = width\n    this.alignDir = alignDir\n    this.pad = this.width - this.data.length\n\n  }\n\n  static spaces(count) { return ' '.repeat(count) }\n  static hyphens(count) { return '-'.repeat(count) }\n\n  format() { throw new Error('Abstract method') }\n\n  align() {\n    switch (this.alignDir) {\n      case 'left':\n        return ''\n          + this.data\n          + Format.spaces(this.pad)\n      case 'right':\n        return ''\n          + Format.spaces(this.pad)\n          + this.data\n      case 'center':\n        return ''\n          + Format.spaces(Math.floor(this.pad/2))\n          + this.data\n          + Format.spaces(Math.ceil(this.pad/2))\n      default: // left\n        return ''\n          + this.data\n          + Format.spaces(this.pad)\n    }\n  }\n}\n","import Format from './Format'\n\nexport default class FormatData extends Format {\n  format() {\n    return ''\n      + Format.spaces(this.extraPad)\n      + this.align(this.data)\n      + Format.spaces(this.extraPad)\n  }\n}\n","import FormatData from './FormatData'\n\n// At the time of writing, format for header is identical to one for data\nexport default class FormatHeader extends FormatData {\n}\n","import Format from './Format'\n\nexport default class FormatDivider extends Format {\n  format() {\n    switch(this.alignDir) {\n      case 'left':\n        return ':' + Format.hyphens(this.width + this.extraPad*2 - 1)\n      case 'right':\n        return Format.hyphens(this.width + this.extraPad*2 - 1) + ':'\n      case 'center':\n        return ':' + Format.hyphens(this.width + this.extraPad*2 - 2) + ':'\n      default:\n        return Format.hyphens(this.width + this.extraPad*2)\n    }\n  }\n}\n","import FormatHeader  from './FormatHeader'\nimport FormatDivider from './FormatDivider'\nimport FormatData    from './FormatData'\n\nexport default class Column {\n  constructor(input, rowType) {\n    this.cell = input\n      .trim()\n    this.rowType = rowType\n  }\n\n  format(width, alignDir) {\n    // this.Formatter.format(this.cell)\n    const Klass = this.Format\n    const formatter = new Klass(this.cell, width, alignDir)\n\n    return formatter.format()\n  }\n\n  get Format() {\n    switch (this.rowType) {\n      case 'header' : return FormatHeader\n      case 'divider': return FormatDivider\n      default:        return FormatData\n    }\n  }\n\n  get cellWidth() {\n    return this.cell.length\n  }\n}\n","export function isDefined(obj) {\n  return 'undefined' !== typeof obj;\n}\n\nexport function isNotDefined(obj) {\n  return !isDefined(obj)\n}\n","import Column from './Column'\nimport { isNotDefined } from './isDefined'\n\nexport default class Row {\n  constructor(input, rowNum) {\n    this.rowNum = rowNum\n\n    this.columns = input\n      .replace(/^\\|/, '').replace(/\\|$/, '')\n      .split('|')\n      .map(columnInput => new Column(columnInput, this.type))\n  }\n\n  format(columnCount, columnWidths, alignDirs) {\n    let formatted = []\n\n    for (let i=0; i<columnCount; i++) {\n      if (isNotDefined(this.columns[i])) { this.columns[i] = new Column('', this.type) }\n      formatted.push(this.columns[i].format(columnWidths[i], alignDirs[i]))\n    }\n\n    return '|' + formatted.join('|') + '|'\n  }\n\n  get columnWidths() {\n    return this.columns.map(column => {\n      return column.cellWidth\n    })\n  }\n\n  get type() {\n    switch(this.rowNum) {\n      case 1:  return 'header'\n      case 2:  return 'divider'\n      default: return 'data'\n    }\n  }\n\n  get isDivider() { return this.type === 'divider' }\n}\n","import Row  from './Row'\n\nexport default class Table {\n  constructor(input) {\n    this.rows = input\n      .split('\\n')\n      .map((rowInput, index) => new Row(rowInput, index+1))\n  }\n\n  format(columnCount, columnWidths, alignDirs) {\n    return this.rows.map(row => {\n      return row.format(columnCount, columnWidths, alignDirs)\n    }).join('\\n')\n  }\n}\n","import Table from './Table'\nimport { isNotDefined } from './isDefined'\n\nexport default class Formatter {\n  constructor(input) {\n    this.input = input\n\n    this.table = new Table(input)\n  }\n\n  get formatted() { return this.table.format(this.columnCount, this.columnWidths, this.alignDirs) }\n\n  get columnWidths() {\n    let maxWidths = []\n\n    // Iterate rows and get the longest size for each column\n    this.table.rows.forEach(row => {\n      if (row.isDivider) { return }\n\n      for (let i=0; i< this.columnCount; i++) {\n        if (isNotDefined(maxWidths[i])) { maxWidths[i] = 0 }\n        if (maxWidths[i] < row.columnWidths[i]) { maxWidths[i] = row.columnWidths[i] }\n      }\n    })\n\n    return maxWidths\n  }\n\n  // columnCount is how many columns this table has\n  // determined by how many columns the divider row has\n  get columnCount() {\n    let count = 0\n    this.table.rows.forEach(row => {\n      if (row.isDivider) { count = row.columns.length }\n    })\n\n    return count\n  }\n\n  get alignDirs() {\n    let dirs = []\n\n    this.table.rows.forEach(row => {\n      if (!row.isDivider) { return }\n\n      for (let i=0; i< this.columnCount; i++) {\n        const cell = row.columns[i].cell\n        if (RegExp(/^:.+:$/).test(cell)) { dirs.push('center') }\n        else if (RegExp(/^:.+/).test(cell)) { dirs.push('left') }\n        else if (RegExp(/.+:$/).test(cell)) { dirs.push('right') }\n        else { dirs.push('left') }\n      }\n    })\n\n    return dirs\n  }\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport Input from './Input'\nimport Result from './Result'\nimport Formatter from './Formatter'\n\nconst FormatArea = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  height: 500px;\n`\n\nconst Left = styled.div`\n  width: 500px;\n  flex-grow: 2;\n`\nconst Right = styled.div`\n  width: 500px;\n  flex-grow: 2;\n`\n\nconst Center = styled.div`\n  width: 50px;\n  flex-grow: 1;\n  text-align: center;\n  line-height: 500px;\n`\n\nconst Button = styled.button`\n`\n\nexport default () => {\n  const [ inputText, setInputText ] = useState('ee')\n  const [ resultText, setResultText ] = useState('ee')\n\n  const aioClick = () => {\n    navigator.clipboard.readText().then(text => {\n      navigator.clipboard.writeText(format(text))\n    })\n  }\n\n  const onInputChange = (value) => {\n    setInputText(value)\n    setResultText(format(value))\n  }\n\n  const format = (value) => {\n    const formatter = new Formatter(value)\n\n    return formatter.formatted\n  }\n\n  return (\n    <>\n      <Button onClick={() => aioClick() }>AIO Click</Button>\n      <FormatArea>\n        <Left>\n          <Input text={inputText} onInputChange={onInputChange}/>\n        </Left>\n        <Center>=></Center>\n        <Right>\n          <Result text={resultText}/>\n        </Right>\n      </FormatArea>\n    </>\n  )\n}\n","// https://confluence.atlassian.com/adminjiracloud/advanced-use-of-the-jira-issue-collector-788726105.html\n\nimport React, { useEffect } from 'react'\nimport styled from 'styled-components'\n\nexport default () => {\n  const DefaultButton = styled.button`\n    padding: 1em 2em;\n    background-color: ${props => props.bgColor\n      || \"rgba(0,0,0,0)\"};\n    color: ${props => props.color\n      || \"inherit\"};\n    border-width: 1px;\n    border-radius: 5px;\n    cursor: pointer;\n  `\n\n  const FixedButton = styled(DefaultButton)`\n    position: fixed;\n    top: 0;\n    right: 20%;\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n    border-top: none;\n  `\n\n  useEffect(() => {\n    window.ATL_JQ_PAGE_PROPS =  {\n      'triggerFunction': showCollectorDialog => {\n        document.querySelector('#feedback-button').addEventListener('click', e => {\n          e.preventDefault()\n          showCollectorDialog()\n        })\n      }\n    }\n  })\n\n  return (\n    <FixedButton id=\"feedback-button\" bgColor=\"#3572b0\" color=\"white\">\n      Feedbacks\n    </FixedButton>\n  )\n}\n","import React from 'react'\n\nimport Title from './Title'\nimport Main from './Main'\nimport IssueCollector from './IssueCollector'\n\nfunction App() {\n  return (\n    <>\n      <Title>This is a markdown table formatter</Title>\n      <Main />\n      <IssueCollector />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}